syntax = "proto3";
package nitric.queue.v1;

import "google/protobuf/struct.proto";

// protoc plugin options for code generation
option go_package = "nitric/v1;v1";
option java_package = "io.nitric.proto.queue.v1";
option java_multiple_files = true;
option java_outer_classname = "Queue";
option php_namespace = "Nitric\\Proto\\Queue\\V1";
option csharp_namespace = "Nitric.Proto.Queue.v1";

// The Nitric Queue Service contract
service Queue {
  // Send a single event to a queue
  rpc Send (QueueSendRequest) returns (QueueSendResponse);
  // Send multiple events to a queue
  rpc SendBatch (QueueSendBatchRequest) returns (QueueSendBatchResponse);
  // Receive event(s) off a queue
  rpc Receive (QueueReceiveRequest) returns (QueueReceiveResponse);
  // Complete an event previously popped from a queue
  rpc Complete (QueueCompleteRequest) returns (QueueCompleteResponse);
}

// Request to push a single event to a queue
message QueueSendRequest {
  // The Nitric name for the queue
  //  this will automatically be resolved to the provider specific queue identifier.
  string queue = 1;
  // The task to push to the queue
  NitricTask task = 2;
}

// Result of pushing a task to a queue
message QueueSendResponse {}

message QueueSendBatchRequest {
  // The Nitric name for the queue
  //  this will automatically be resolved to the provider specific queue identifier.
  string queue = 1;
  // Array of tasks to push to the queue
  repeated NitricTask tasks = 2;
}

// An ordered array of booleans
// matching the same order as the events given
// in the original request, each one will mark if the
// Event was successful pushed
message QueueSendBatchResponse {
  repeated FailedTask failedTasks = 1;
}

message QueueReceiveRequest {
  // The nitric name for the queue
  //  this will automatically be resolved to the provider specific queue identifier.
  string queue = 1;
  // The max number of items to pop off the queue, may be capped by provider specific limitations
  int32 depth = 2;
}

message QueueReceiveResponse {
  // Array of tasks popped off the queue
  repeated NitricTask tasks = 1;
}

message QueueCompleteRequest {
  // The nitric name for the queue
  //  this will automatically be resolved to the provider specific queue identifier.
  string queue = 1;
  // Lease id of the task to be completed
  string leaseId = 2;
}

message QueueCompleteResponse {}

message FailedTask {
  // The task that failed to be pushed
  NitricTask task = 1;
  // A message describing the failure
  string message = 2;
}

// A task to be sent or received from a queue.
message NitricTask {
  string id = 1;
  // The lease id unique to the pop request, this must be used to complete, extend the lease or release the task.
  string leaseId = 2;
  string payloadType = 3;
  google.protobuf.Struct payload = 4;
}

