syntax = "proto3";
package nitric.storage.v1;

// protoc plugin options for code generation
option go_package = "nitric/v1;v1";
option java_package = "io.nitric.proto.storage.v1";
option java_multiple_files = true;
option java_outer_classname = "Storages";
option php_namespace = "Nitric\\Proto\\Storage\\V1";
option csharp_namespace = "Nitric.Proto.Storage.v1";

// Services for storage and retrieval of files in the form of byte arrays, such as text and binary files.
service StorageService {
  // Retrieve a file from a bucket
  rpc Read (StorageReadRequest) returns (stream StorageReadResponse);
  // Store a file to a bucket
  rpc Write (stream StorageWriteRequest) returns (StorageWriteResponse);
  // Delete a file from a bucket
  rpc Delete (StorageDeleteRequest) returns (StorageDeleteResponse);
}

// Message containing data being written or read, with associated metadata.
message StorageDataChunk {
  // The contents of this chunk of data
  bytes data = 1;
  // TODO: confirm need for checksum data validation.
  // CRC32C digest of this chunk.
  // int32 crc32c = 2;
}

// Message containing all metadata for a file, including it's key, bucket, etc.
message StorageFile {
  // Nitric name of the bucket storing the file.
  //  this will be automatically resolved to the provider specific bucket identifier.
  string bucket_name = 1;
  // Key to store the item under
  string key = 2;
}

message StorageWriteRequest {
  // The first message of a stream or any non-stream request must set the file metadata.
  StorageFile file = 1;
  
  // The offset from the beginning of the file where the data should be written.
  // Should be 0 if this is the first write to a new file.
  int64 write_offset = 2;

  // Chunk of data for the file or the entire file for non-stream requests.
  StorageDataChunk data = 3;

  // Set to true if this is the final chunk of data for the file.
  bool finished = 4;

  // TODO: confirm need for checksum data validation.
  // CRC32C digest of this chunk, only included in the first or final request.
  // int32 crc32c = 2;
}

// Result of writing a storage item
message StorageWriteResponse {}



// Request to retrieve a storage item
message StorageReadRequest {
  // The file to be retrieved
  StorageFile file = 1;
}

// Returned storage item
message StorageReadResponse {
  // Chunk of data for the file or the entire file for non-stream requests.
  StorageDataChunk data = 3;

  // Set to true if this is the final chunk of data for the file.
  bool finished = 4;
}

// Request to delete a storage item
message StorageDeleteRequest {
  // The file to be retrieved
  StorageFile file = 1;
}

// Result of deleting a storage item
message StorageDeleteResponse {}